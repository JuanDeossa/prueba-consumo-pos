// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  DEVELOPER
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  role       Role      @default(USER)
  name       String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  deleted_by String?
  is_active  Boolean   @default(true)
  Session    Session[]
  Order      Order[] // Relación con las órdenes realizadas por el usuario

  @@index([email])
}

model Session {
  id            String   @id @default(uuid())
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  expires_at    DateTime
  is_active     Boolean  @default(true)
  refresh_token String   @unique
  access_token  String   @unique
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int         @default(0) // Cantidad de productos disponibles
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  is_active   Boolean     @default(true)
  OrderItem   OrderItem[] // Relación con los ítems de la orden

  @@index([name])
}

model Order {
  id         String      @id @default(uuid())
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  total      Float
  status     OrderStatus @default(PENDING)
  user       User        @relation(fields: [user_id], references: [id])
  user_id    String
  OrderItem  OrderItem[] // Relación con los ítems de la orden
}

model OrderItem {
  id         String  @id @default(uuid())
  quantity   Int     @default(1)
  price      Float // Precio del producto en el momento de la compra
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id   String
  product    Product @relation(fields: [product_id], references: [id])
  product_id String
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}
